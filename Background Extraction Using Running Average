#-------------------------------------------------------------------------------
# Name:     Background Extraction using running average

# Purpose: It is about Background Extraction from a Video.

#Suppose you are given video of footage of traffic, may be some thing like
 #this : Traffic in India, and you are asked to find an approximate background.
  #Or anything like that.

#Background extraction comes important in object tracking. If you already
 #have an image of the bare background, then it is simple. But in many cases,
  #you won't have such an image and so, you will have to create one. That is
   #where Running Average comes in handy.


#( I thought about this when one guy asked a question in SOF : Link)

#The function we use here to find Running Average is cv2.accumulateWeighted().
 #For example, if we are watching a video, we keep feeding each frame to this
  #function, and the function keep finding the averages of all frames fed to
   #it as per the relation below :

#        dst(x,y) <- (1-alpha).dst(x,y)+alpha.src(x,y) if mask (x,y) ? 0

#where :
#src is nothing but our source image. It can be grayscale or color image and
#either 8-bit or 32-bit floating point.

#dst is the output or accumulator image with same channels as that of source
 #image, and it is either 32-bit or 64-bit floating point. Also, we should
  #declare it first to a value which will be taken as initial value.

#alpha is the weight of the input image. According to Docs, alpha regulates
 #the update speed (how fast the accumulator ?forgets? about earlier images).
  #In simple words, if alpha is a higher value, average image tries to catch
   #even very fast and short changes in the data. If it is lower value, average
    #becomes sluggish and it won't consider fast changes in the input images.

# Author:      Noah caulfield & abid rahman
#
# Created:   july 19th, 2013
# Copyright:   (c) Noah caulfield 2013

#-------------------------------------------------------------------------------


import cv2
import numpy as np

c = cv2.VideoCapture(0)
_,f = c.read()

avg1 = np.float32(f)
avg2 = np.float32(f)

while(1):
    _,f = c.read()

    cv2.accumulateWeighted(f,avg1,0.1)
    cv2.accumulateWeighted(f,avg2,0.01)

    res1 = cv2.convertScaleAbs(avg1)
    res2 = cv2.convertScaleAbs(avg2)

    cv2.imshow('img',f)
    cv2.imshow('avg1',res1)
    cv2.imshow('avg2',res2)
    k = cv2.waitKey(20)

    if k == 27:
        break

cv2.destroyAllWindows()
c.release()





#In above code, I have set two averages, one with higher alpha value and another
#with lower alpha value so you can understand effect of alpha.
#At first both are set to initial frame of the capture. And in loop they get updated.
